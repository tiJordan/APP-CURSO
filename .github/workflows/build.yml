name: Build & Publish IA PROTEC

# Executa em cada push de tag vX.Y.Z
on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-publish:
    runs-on: windows-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller packaging jsonschema

      # <<<<<< ERRO aqui — corrigido >>>>>>
      - name: Build EXE with PyInstaller
        shell: pwsh
        run: pyinstaller --clean --onefile --noconsole --name "IA PROTEC" --icon "assets/icone_app.ico" --add-data "assets;assets" --add-data "installer/manifest-schema.json;installer" main.py

      - name: List dist
        shell: pwsh
        run: dir dist

      # Se o runner NÃO tiver o Advanced Installer instalado,
      # este passo vai falhar. Use self-hosted com AI 22.9 ou pule este passo.
      - name: Build MSI via Advanced Installer
        shell: pwsh
        env:
          RELEASE_TAG: ${{ github.ref_name }}
        run: |
          $ver = $Env:RELEASE_TAG.TrimStart('v')
          $ai  = 'C:\Program Files (x86)\Caphyon\Advanced Installer 22.9\AdvancedInstaller.com'
          & $ai /build "installer/PROTEC IA.aip" /SetVersion $ver /SetOutputPath "dist\"

      - name: Capture MSI path
        id: msi
        shell: pwsh
        run: |
          $msi = Get-ChildItem dist\*.msi | Select-Object -First 1
          if (-not $msi) { throw "MSI não encontrado em dist\" }
          "MSI_PATH=$($msi.FullName)" | Out-File -Append -Encoding utf8 $Env:GITHUB_ENV
          "MSI_NAME=$($msi.Name)"     | Out-File -Append -Encoding utf8 $Env:GITHUB_ENV

      - name: Calculate MSI SHA-256
        shell: pwsh
        run: |
          $hash = (Get-FileHash -Algorithm SHA256 $Env:MSI_PATH).Hash.ToLower()
          "MSI_SHA256=$hash" | Out-File -Append -Encoding utf8 $Env:GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload MSI asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.MSI_PATH }}
          asset_name: ${{ env.MSI_NAME }}
          asset_content_type: application/octet-stream

      - name: Build version.json
        shell: pwsh
        run: |
          $ver = $Env:GITHUB_REF_NAME.TrimStart('v')
          $json = @"
          {
            "version": "$ver",
            "installer": "$Env:MSI_NAME",
            "sha256": "$Env:MSI_SHA256",
            "release_notes_url": "https://github.com/${{ github.repository }}/releases/tag/$($Env:GITHUB_REF_NAME)",
            "mandatory": false
          }
          "@
          $json | Out-File -Encoding utf8 version.json

      - name: Publish manifest to share
        shell: pwsh
        env:
          SMB_USER: ${{ secrets.SMB_USER }}
          SMB_PASS: ${{ secrets.SMB_PASS }}
        run: |
          net use \\SRV-AD02\DEPLOY /user:$Env:SMB_USER $Env:SMB_PASS
          copy /Y version.json \\SRV-AD02\DEPLOY\version.json
          copy /Y "$Env:MSI_PATH" \\SRV-AD02\DEPLOY\$Env:MSI_NAME
          net use \\SRV-AD02\DEPLOY /delete

      - name: Validate manifest.json (Python)
        shell: pwsh
        run: |
          python - << 'PYCODE'
          import json, jsonschema, io, sys
          with open('installer/manifest-schema.json', encoding='utf-8') as f: schema = json.load(f)
          with open('version.json', encoding='utf-8') as f: manifest = json.load(f)
          jsonschema.validate(manifest, schema)
          print("Manifest OK")
          PYCODE

      - name: Done
        shell: pwsh
        run: echo "Build and publish OK for $Env:GITHUB_REF_NAME"